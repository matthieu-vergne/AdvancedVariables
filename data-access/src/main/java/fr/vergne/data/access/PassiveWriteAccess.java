package fr.vergne.data.access;

import fr.vergne.data.access.util.AccessFactory;

/**
 * {@link PassiveWriteAccess} provides a write access to the value of a property
 * in a passive way, such that the user wait for the value to be requested. Only
 * one {@link ValueGenerator} can be set to tell which value to generate. If
 * multiple sources need to be considered, you have to implement a single
 * {@link ValueGenerator} which considers all of them with a conflict resolution
 * strategy to choose the right one.<br/>
 * <br/>
 * If you prefer to manually control the writing, you should consider to use an
 * {@link ActiveWriteAccess}. You can create one above a
 * {@link PassiveWriteAccess} through
 * {@link AccessFactory#createActiveWriteFromPassiveWrite(PassiveWriteAccess, Object)}
 * .
 * 
 * @author Matthieu Vergne <matthieu.vergne@gmail.com>
 * 
 * @param <Value>
 */
public interface PassiveWriteAccess<Value> extends PropertyAccess<Value> {

	/**
	 * 
	 * @param generator
	 *            the {@link ValueGenerator} which will provide the value when
	 *            requested.
	 */
	public void setValueGenerator(ValueGenerator<Value> generator);

	/**
	 * 
	 * @return the {@link ValueGenerator} set through
	 *         {@link #setValueGenerator(ValueGenerator)}
	 */
	public ValueGenerator<Value> getValueGenerator();

	/**
	 * A {@link ValueGenerator} allows to generate a value to be used by a
	 * {@link PassiveWriteAccess}.
	 * 
	 * @author Matthieu Vergne <matthieu.vergne@gmail.com>
	 * 
	 * @param <T>
	 */
	public static interface ValueGenerator<T> {
		/**
		 * 
		 * @return the value generated by this {@link ValueGenerator}
		 */
		public T generateValue();
	}
}
